Small tasks that still need to be performed:
- Parametrise the 10% resources spent on coalition intra-actions (AS) (PF)
- Parametrise the 10% resources spent on coalition inter-actions (AS) (PF)
- The belonging level function in the agents.py file is used for both policy and problem teams incorrectly. Two different functions should be used. This applies to both the agenda setting and the policy formulation functions.
- The knowledge exchange function in the agents.py file is used for both policy and problem teams incorrectly. Two different functions be used.
- Address the decrease in partial knowledge of all agents when participating in teams or coalitions are the partial knowledge is only transmitted between agents interacting leading to a small exchange of knowledge for all of the members.
- Address the lack of update of the awareness decay for the agents that are part of a coalition or a team as their awareness decay is not stopped when the coalition or the team is performing an action. This leads to an overall depletion of the awareness levels for all the agents within the system.
- Add the fact that the external parties have selective states interest - this has very very large ramification throughout the entire code and cannot be implemented in steps without robust safeguards.
- In the file team_creation, knowledge_exchange_team() is used inappropriately for policy and problems. The policy and instrument functions should be used in the case that the team is using a policy.
- Address the issue of initialisation of the policy hierarchy partial beliefs (3S). This has an major impact on the conflict level calculations.
- Address the fact that for the conflict level of the shadow network of the teams, the full knowledge is used to constitute the conflict level which puts the teams at an advantage in their actions compared to individuals.
- Address the lack of resource potency parameter in the inter-team actions (AS) (3S)
- Check if teams.issue is split between AS and PF - they seem to overlap creating potential problems.
- For each actorâ€™s actions list, make sure that if all actions are the same grading, the action selected is random and not simply the first one in the list (as the maximum algorithms would do it)
- Check the actions of the external parties towards the electorate (they were mis-implemented)


Adaptation:
- Change all agents.py function to actionFunction.py (impacts missing - grading done)
- Change the inter-team to function based actions
- Change the intra-team impacts to function based actions